# -*- coding: utf-8 -*-
"""csp_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IrB0At6lLTzWWX5srzXlkmmmzS-YdFnd
"""

import numpy as np
import numpy.linalg as LA
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import axes3d
import itertools # for generating the binary configurations
import os

from google.colab import drive
drive.mount('/content/drive')

## must edit the files and the drive accordingly to be able to pull the

E_dft = np.loadtxt('/content/drive/MyDrive/SISSA/Academics/crystal_structure_prediction/config_energies_dft.dat')
# E_dft = np.loadtxt('config_energies_dft.dat')
E_dft = E_dft[:,1]
# E_ce = np.loadtxt('config_energies_ce.dat')
E_ce = np.loadtxt('/content/drive/MyDrive/SISSA/Academics/crystal_structure_prediction/config_energies_ce.dat')

Ncfg = len(E_dft)

len(E_dft),len(E_ce)

(Jf,error,rank,singular) = LA.lstsq(E_ce,E_dft,rcond=None) # E_ce = A, E_dft = b

Jf,error

E_dft - E_ce @ Jf

"""#### Separates training and validation sets"""

E_dft_tset = E_dft[:16]
E_ce_tset = E_ce[:16]
E_dft_vset = E_dft[16:]
E_ce_vset = E_ce[16:]

"""#### Training: separates arrays according to number of figures included"""

E_ce_tset[:,0]

train_error = []
Jf_list = []
for f_expac in np.arange(4):
    temp_ce_tset = E_ce_tset[:,:f_expac+1]
    (Jf_temp,error_temp,rank_temp,sing_dump) = LA.lstsq(temp_ce_tset,E_dft_tset,rcond=None)
    train_error.append(error_temp)
    Jf_list.append(Jf_temp)

train_error = np.sqrt(np.array(train_error)/len(E_ce_tset)) # RMS
print('Training errors are:\n',train_error)

Jf_list

"""#### Validation"""

val_error = []
printlist = ['0-body only','with 1-body','with 2-body NN','with 2-body NNN']
print('E_dft validation data is',E_dft_vset,'\n')
for k in np.arange(4):
    print(printlist[k])
    temp_ce_vset = E_ce_vset[:,:k+1]
    # print('J_f vector is',temp_ce_vset)
    Jvec = np.array(Jf_list[k])
    print('J_f vector is',Jvec)
    print('Cluster expansion (ce) coefficient matrix is\n',temp_ce_vset)
    print('E_ce validation data is',temp_ce_vset@Jvec,'\n\n')
    val_error.append(np.sum((E_dft_vset-temp_ce_vset@Jvec)**2))
    # print('Validation error is',val_error[k],'\n\n')
# val_error = np.sqrt(val_error)
# val_error = np.sqrt(np.array(train_error)/len(train_error)) # RMS
val_error = np.sqrt(np.array(val_error)/len(E_ce_vset)) # RMS

train_error,val_error

"""#### Plots"""

plt.scatter(np.arange(4)+1,train_error[:],label='Training error')
plt.scatter(np.arange(4)+1,val_error[:],label='Validation error')
plt.xlabel('No. of figures')
plt.ylabel('RMSE')
plt.legend()
plt.savefig('rmse_raw.png')

plt.scatter(np.arange(3)+2,train_error[1:],label='Training error')
plt.scatter(np.arange(3)+2,val_error[1:],label='Validation error')
plt.title('First data point omitted')
plt.xlabel(r'No. of figures $f$ included')
plt.ylabel('RMSE')
plt.legend()
plt.savefig('rmse_clean.png')